"""
–ú–æ–¥—É–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
"""
from datetime import datetime, timedelta

from aiogram import Bot
from aiogram.filters.callback_data import CallbackData
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram_calendar import SimpleCalendar

from database.data_models import Workout
from database.requests import ServiceRequests, WorkoutsRequests
from utils.workouts_types import workout_types
from utils.states import ChooseWorkoutTimeState
from utils.support_func import get_formatted_list_of_users_by_workout_id

from loader import MainSettings


async def add_workout(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_walk

    –í—ã–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    """
    calendar = SimpleCalendar(show_alerts=True)
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        reply_markup=await calendar.start_calendar()
    )


async def process_simple_calendar(callback_query: CallbackQuery, callback_data: CallbackData, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    """
    calendar = SimpleCalendar(show_alerts=True)
    calendar.set_dates_range(datetime.today(), datetime.today() + timedelta(days=100))
    selected, date = await calendar.process_selection(callback_query, callback_data)
    await state.update_data(date=date)
    if selected:
        await callback_query.message.answer(
            f'–í–∞—à –≤—ã–±–æ—Ä: {date.strftime("%d.%m.%Y")}',
            reply_markup=await choose_workout_type_kb()
        )


async def choose_time_for_workout_handler(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    """
    workout_type_id = int(call.data.split('_')[1])
    # time = call.data.split('_')[-1]
    await state.update_data(workout_type_id=workout_type_id)
    await call.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        reply_markup=await choose_time_for_workout_kb()
    )
    await call.answer('–í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ')


async def set_time_for_workout(call: CallbackQuery, state: FSMContext, scheduler: AsyncIOScheduler):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞, –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    """
    time = call.data.split('_')[-1]
    if time == 'morning':
        time = timedelta(hours=9, minutes=00)
        # await state.update_data(time=time)
        # await add_workout_to_db(call, bot, state, scheduler)
    elif time == 'evening':
        time = timedelta(hours=20, minutes=30)
    else:
        await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM')
        await state.set_state(ChooseWorkoutTimeState.CHOOSE_TIME)
    await state.update_data(time=time)
    workout_data = await add_workout_to_db(call, state)
    # —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    scheduler.add_job(remainder_with_list_of_users,
                      trigger='date',
                      run_date=workout_data.date - timedelta(hours=1),
                      kwargs={'workout_id': workout_data.workout_id})
    await call.answer('–í—Ä–µ–º—è –≤—ã–±—Ä–∞–Ω–æ')


async def custom_time_handler(message: Message, bot: Bot, state: FSMContext, scheduler: AsyncIOScheduler):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—Ä—É—á–Ω—É—é
    """
    time = message.text.split(':')
    if len(time) == 2 and 0 <= int(time[0]) < 24 and 0 <= int(time[1]) < 60:
        time = timedelta(hours=int(time[0]), minutes=int(time[1]))
        await state.update_data(time=time)
        await state.set_state(ChooseWorkoutTimeState.ADD_WORKOUT)

        workout_data = await add_workout_to_db(message, state)
        scheduler.add_job(remainder_with_list_of_users,
                          trigger='date',
                          run_date=workout_data.date - timedelta(hours=1),
                          kwargs={'workout_id': workout_data.workout_id})
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:MM')


async def add_workout_to_db(message: Message | CallbackQuery, state: FSMContext) -> Workout:
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    user_id = message.from_user.id
    data = await state.get_data()

    date = data.get('date')
    time = data.get('time')
    new_date = date + time

    workout_type_id = data.get('workout_type_id')
    workout = await WorkoutsRequests.create_workout(new_date, workout_type_id, user_id)
    answer_message = (f'–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ <b>{workout_types[workout.type_id]}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ <b>{workout.date.strftime("%d.%m")}</b>'
                      f' –≤ <b>{workout.date.strftime("%H:%M")}</b>.\n '
                      f'–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.')

    if isinstance(message, CallbackQuery):
        await message.message.answer(answer_message)
    else:
        await message.answer(answer_message)
    return workout


async def remainder_with_list_of_users(bot: Bot, workout_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä—É, —Å–æ–æ–±—â–∞—è —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–∞ —á–∞—Å –¥–æ –∑–∞–Ω—è—Ç–∏—è
    :param bot:
    :param workout_id:
    :return:
    """
    users_list = await get_formatted_list_of_users_by_workout_id(workout_id)
    for user_id in (MainSettings.SUPERUSER, 6416472110):
        await bot.send_message(
            chat_id=user_id,
            text=f"–ó–∞–ø–∏—Å–∞–Ω—ã:\n{users_list}",
        )


async def choose_workout_type_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    :return: InlineKeyboardMarkup
    """
    keyboard = InlineKeyboardBuilder()

    types = await ServiceRequests.fetch_all_from_table('workout_types')
    for type_ in types:
        text = type_[1]
        workout_type_id = type_[0]
        keyboard.button(text=text, callback_data=f'choose_{workout_type_id}')

    keyboard.adjust(1)

    return keyboard.as_markup()


async def choose_time_for_workout_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    """
    times_keyboard = InlineKeyboardBuilder()

    times_keyboard.button(text='–£—Ç—Ä–æ ‚òÄ', callback_data='time_morning')
    times_keyboard.button(text='–í–µ—á–µ—Ä üåì', callback_data='time_evening')
    times_keyboard.button(text='–í—Ä—É—á–Ω—É—é', callback_data='time_custom')

    times_keyboard.adjust(2)

    return times_keyboard.as_markup()
